    21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
level 1 start --> (21 20) (19 18) (17 16) (15 14) (13 12) (11 10) (9 8) (7 6) (5 4) (3 2) | 1  --> elem_size = 1
level 1 end   --> (20 21) (18 19) (16 17) (14 15) (12 13) (10 11) (8 9) (6 7) (4 5) (2 3) | 1

level 2 start --> ([20 21] [18 19]) ([16 17] [14 15]) ([12 13] [10 11]) ([8 9] [6 7]) ([4 5] [2 3]) | 1  --> elem_size  = 2
level 2 end   --> ([18 19] [20 21]) ([14 15] [16 17]) ([10 11] [12 13]) ([6 7] [8 9]) ([2 3] [4 5]) | 1

level 3 start --> ([18 19 20 21] [14 15 16 17]) ([10 11 12 13] [6 7 8 9]) [2 3 4 5] | 1  --> elem_size  = 4
level 3 end   --> ([14 15 16 17] [18 19 20 21]) ([6 7 8 9] [10 11 12 13]) | 2 3 4 5 1

level 4 start --> ([14 15 16 17 18 19 20 21] [6 7 8 9 10 11 12 13]) | 2 3 4 5 1  --> elem_size = 8
level 4 end   --> ([6 7 8 9 10 11 12 13] [14 15 16 17 18 19 20 21]) | 2 3 4 5 1

We stop and go 1 step back to LEVEL 3

==== STOP PAIR COMPARING ====

level 3 start --> ([6 7 8 9] [10 11 12 13]) ([14 15 16 17] [18 19 20 21]) [2 3 4 5] | 1  //numbers from level 4 end, but elem_size = 4
                        b1          a1              b2              a2          b3
                    _a = [10 11 12 13] [18 19 20 21]
                                a1          a2

                    _b = [6 7 8 9] [14 15 16 17] [2 3 4 5]
                                b1      b2          b3

Jacobsthal number = 0, 1, 1, 3, 5, 11 .....

1. We put b1 to the position [0] in main:

                    _main = [6 7 8 9] [10 11 12 13] [18 19 20 21]
                                b1          a1          a2
                    
2. Using binary search we are putting b3 into main:

                    _main = [2 3 4 5] [6 7 8 9] [10 11 12 13] [18 19 20 21]

3. Using binary search we are putting b2 into main:

                    _main = [2 3 4 5] [6 7 8 9] [10 11 12 13] [14 15 16 17] [18 19 20 21]

level 3 end   --> [2 3 4 5] [6 7 8 9] [10 11 12 13] [14 15 16 17] [18 19 20 21] 1


